{"version":3,"sources":["webpack:///src/pages/Dashboard/Pages/Schedule/src/pages/Dashboard/Pages/Schedule/Schedule.vue"],"names":[],"mappings":"AA2PA,cACA,gBACA,CAEA,0BACA,wBACA","file":"chunk-878a9976.d0cbe4b9.css","sourcesContent":["<template>\n\t<div>\n\t\t<modal\n\t\t\t:show.sync=\"modals.classic\"\n\t\t\theaderClasses=\"justify-content-center\"\n\t\t>\n\t\t\t<h4 slot=\"header\" class=\"title title-up\">Block shift</h4>\n\t\t\t<ValidationObserver ref=\"newShift\">\n\t\t\t\t<ValidationProvider\n\t\t\t\t\tname=\"TimeRange\"\n\t\t\t\t\trules=\"required\"\n\t\t\t\t\tv-slot=\"{ passed, errors }\"\n\t\t\t\t>\n\t\t\t\t\t<fg-input :error=\"errors[0]\" :hasSuccess=\"passed\">\n\t\t\t\t\t\t<el-time-picker\n\t\t\t\t\t\t\tis-range\n\t\t\t\t\t\t\tv-model=\"timeRange\"\n\t\t\t\t\t\t\trange-separator=\"To\"\n\t\t\t\t\t\t\tstep=\"00:30\"\n\t\t\t\t\t\t\t:picker-options=\"`00:00:00 - 24:00:00`\"\n\t\t\t\t\t\t\tformat=\"HH:mm\"\n\t\t\t\t\t\t\tstart-placeholder=\"Start time\"\n\t\t\t\t\t\t\tend-placeholder=\"End time\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t</el-time-picker>\n\t\t\t\t\t</fg-input>\n\t\t\t\t</ValidationProvider>\n\t\t\t</ValidationObserver>\n\t\t\t<template slot=\"footer\">\n\t\t\t\t<n-button\n\t\t\t\t\t@click.native=\"createShift\"\n\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\tround\n\t\t\t\t\tblock\n\t\t\t\t>\n\t\t\t\t\tCreate Shift\n\t\t\t\t</n-button>\n\t\t\t\t<n-button\n\t\t\t\t\ttype=\"danger\"\n\t\t\t\t\t@click.native=\"modals.classic = false\"\n\t\t\t\t\tround\n\t\t\t\t>\n\t\t\t\t\tClose\n\t\t\t\t</n-button>\n\t\t\t</template>\n\t\t</modal>\n\t\t<fullCalendar\n\t\t\tref=\"calendar\"\n\t\t\tid=\"calendar\"\n\t\t\tdefaultView=\"dayGridMonth\"\n\t\t\t:plugins=\"calendarPlugins\"\n\t\t\t:events=\"shifts\"\n\t\t\t:selectable=\"true\"\n\t\t\t@prev=\"console.log('test')\"\n\t\t\t@eventClick=\"dateClick\"\n\t\t\t@select=\"createShiftClick\"\n\t\t\t:header=\"header\"\n\t\t\t:buttonIcons=\"buttonIcons\"\n\t\t\t:selectHelper=\"true\"\n\t\t\t:editable=\"false\"\n\t\t/>\n\t</div>\n</template>\n<script>\nimport Swal from \"sweetalert2\";\nimport FullCalendar from \"@fullcalendar/vue\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport { TimePicker } from \"element-ui\";\n\nexport default {\n\tcomponents: {\n\t\tFullCalendar,\n\t\t[TimePicker.name]: TimePicker\n\t},\n\tmounted() {\n\t\tthis.fetchShifts();\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcalendarPlugins: [dayGridPlugin, interactionPlugin, timeGridPlugin],\n\t\t\theader: {\n\t\t\t\tcenter: \"dayGridMonth,timeGridWeek,timeGridDay\",\n\t\t\t\tright: \"prev,next,today\"\n\t\t\t},\n\t\t\tbuttonIcons: {\n\t\t\t\tclose: \"fa-times\",\n\t\t\t\tprev: \"fc-icon-left-single-arrow\",\n\t\t\t\tnext: \"fc-icon-right-single-arrow\",\n\t\t\t\tprevYear: \"fc-icon-left-single-arrow\",\n\t\t\t\tnextYear: \"fc-icon-right-single-arrow\"\n\t\t\t},\n\t\t\tshifts: [],\n\t\t\tmodals: {\n\t\t\t\tclassic: false\n\t\t\t},\n\t\t\ttimeRange: [new Date(0, 0, 0, 8, 0), new Date(0, 0, 0, 16, 0)],\n\t\t\tblockedShifts: []\n\t\t};\n\t},\n\tmethods: {\n\t\tbindEvents() {\n\t\t\tconst prevButton = document.getElementsByClassName(\n\t\t\t\t\"fc-prev-button\"\n\t\t\t)[0];\n\t\t\tprevButton.addEventListener(\"click\", () => this.fetchShifts());\n\t\t\tconst nextButton = document.getElementsByClassName(\n\t\t\t\t\"fc-next-button\"\n\t\t\t)[0];\n\t\t\tnextButton.addEventListener(\"click\", () => this.fetchShifts());\n\n\t\t\tconst todayButton = document.getElementsByClassName(\n\t\t\t\t\"fc-today-button\"\n\t\t\t)[0];\n\t\t\ttodayButton.addEventListener(\"click\", () => this.fetchShifts());\n\n\t\t\tconst dayButton = document.getElementsByClassName(\n\t\t\t\t\"fc-timeGridDay-button\"\n\t\t\t)[0];\n\t\t\tdayButton.addEventListener(\"click\", () => this.fetchShifts());\n\n\t\t\tconst weekButton = document.getElementsByClassName(\n\t\t\t\t\"fc-timeGridWeek-button\"\n\t\t\t)[0];\n\t\t\tweekButton.addEventListener(\"click\", () => this.fetchShifts());\n\n\t\t\tconst monthButton = document.getElementsByClassName(\n\t\t\t\t\"fc-dayGridMonth-button\"\n\t\t\t)[0];\n\t\t\tmonthButton.addEventListener(\"click\", () => this.fetchShifts());\n\t\t},\n\t\tdateClick(info) {\n\t\t\tif (info.event.classNames.includes(\"event-red\"))\n\t\t\t\tSwal.fire({\n\t\t\t\t\ttitle: \"Are you sure?\",\n\t\t\t\t\ttext: `You won't be able to revert this!`,\n\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\tshowCancelButton: true,\n\t\t\t\t\tconfirmButtonClass: \"btn btn-success btn-fill\",\n\t\t\t\t\tcancelButtonClass: \"btn btn-danger btn-fill\",\n\t\t\t\t\tconfirmButtonText: \"Yes, delete it!\",\n\t\t\t\t\tbuttonsStyling: false\n\t\t\t\t}).then(async (result) => {\n\t\t\t\t\tif (result.value) {\n\t\t\t\t\t\tconst deleteResult = await this.deleteShift(\n\t\t\t\t\t\t\t+info.event.title.split(\"-\")[1]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (deleteResult.status) {\n\t\t\t\t\t\t\tinfo.event.remove();\n\t\t\t\t\t\t\tSwal.fire({\n\t\t\t\t\t\t\t\ttitle: \"Deleted!\",\n\t\t\t\t\t\t\t\ttext: `You deleted a shift`,\n\t\t\t\t\t\t\t\ttype: \"success\",\n\t\t\t\t\t\t\t\tconfirmButtonClass: \"btn btn-success btn-fill\",\n\t\t\t\t\t\t\t\tbuttonsStyling: false\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthis.blockedShifts.length = 0;\n\t\t\t\t\t\t\tthis.fetchShifts();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n\t\tcreateShiftClick(info) {\n\t\t\tif (info.date) {\n\t\t\t\tthis.blockedShifts.push({ date: info.date });\n\t\t\t} else {\n\t\t\t\tfor (\n\t\t\t\t\tlet element = info.start;\n\t\t\t\t\telement < info.end;\n\t\t\t\t\telement.setDate(element.getDate() + 1)\n\t\t\t\t) {\n\t\t\t\t\tthis.blockedShifts.push({\n\t\t\t\t\t\tdate: new Date(element)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.modals.classic = true;\n\t\t},\n\t\tasync createShift() {\n\t\t\tlet isValidForm = await this.$refs.newShift.validate();\n\t\t\tif (isValidForm) {\n\t\t\t\tconst shifts = this.blockedShifts.map((item) => ({\n\t\t\t\t\tstartTime: new Date(\n\t\t\t\t\t\titem.date.setHours(this.timeRange[0].getHours())\n\t\t\t\t\t),\n\t\t\t\t\tendTime: new Date(\n\t\t\t\t\t\titem.date.setHours(this.timeRange[1].getHours())\n\t\t\t\t\t)\n\t\t\t\t}));\n\n\t\t\t\tvar result = await this.$shift.addShift(shifts);\n\t\t\t\tif (result.status === true) {\n\t\t\t\t\tthis.$notify({\n\t\t\t\t\t\tmessage: \"Shifts created successfuly\",\n\t\t\t\t\t\ttimeout: 4000,\n\t\t\t\t\t\ticon: \"now-ui-icons ui-1_bell-53\",\n\t\t\t\t\t\thorizontalAlign: \"right\",\n\t\t\t\t\t\tverticalAlign: \"top\",\n\t\t\t\t\t\ttype: \"success\"\n\t\t\t\t\t});\n\t\t\t\t\tthis.fetchShifts();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tasync fetchShifts() {\n\t\t\tthis.isLoading = true;\n\t\t\tthis.clearShifts();\n\n\t\t\tconst dateRange = this.$refs.calendar.getApi().state.dateProfile\n\t\t\t\t.currentRange;\n\n\t\t\tconst result = await this.$shift.getShifts({\n\t\t\t\tstartDate: dateRange.start,\n\t\t\t\tendDate: dateRange.end\n\t\t\t});\n\t\t\tthis.shifts = result.data.map((shift) => {\n\t\t\t\tconst temporaryStart = new Date(shift.startTime);\n\t\t\t\tconst temporaryEnd = new Date(shift.endTime);\n\n\t\t\t\treturn {\n\t\t\t\t\tstart: new Date(\n\t\t\t\t\t\ttemporaryStart.setHours(\n\t\t\t\t\t\t\ttemporaryStart.getHours() -\n\t\t\t\t\t\t\t\ttemporaryStart.getTimezoneOffset() / 60\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\tend: new Date(\n\t\t\t\t\t\ttemporaryEnd.setHours(\n\t\t\t\t\t\t\ttemporaryEnd.getHours() -\n\t\t\t\t\t\t\t\ttemporaryEnd.getTimezoneOffset() / 60\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\ttitle: shift.isBlocked ? `Blocked-${shift.id}` : \"Shift\",\n\t\t\t\t\tallDay: false,\n\t\t\t\t\tclassName: shift.isBlocked ? \"event-red\" : \"event-azure\"\n\t\t\t\t};\n\t\t\t});\n\t\t\tthis.isLoading = false;\n\t\t\tthis.bindEvents();\n\t\t},\n\t\tasync clearShifts() {\n\t\t\tthis.shifts.length = 0;\n\t\t},\n\t\tasync deleteShift(id) {\n\t\t\treturn await this.$shift.deleteShift(id);\n\t\t}\n\t}\n};\n</script>\n<style>\n#fullCalendar {\n\tmin-height: 300px;\n}\n\n.el-loading-spinner .path {\n\tstroke: #66615b !important;\n}\n</style>\n"]}